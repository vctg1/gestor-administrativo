{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport Mock from \"./mock\";\nconst JWT_SECRET = \"jwt_secret_key\";\nconst JWT_VALIDITY = \"7 days\";\nconst userList = [{\n  id: 1,\n  role: \"SA\",\n  name: \"Jason Alexander\",\n  username: \"jason_alexander\",\n  email: \"demo@example.com\",\n  avatar: \"/static/avatar/001-man.svg\",\n  age: 25 // password: 'v&)3?2]:'\n\n}];\nMock.onPost(\"/api/auth/login\").reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email\n    } = JSON.parse(config.data);\n    const user = userList.find(user => user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: \"Invalid email or password\"\n      }];\n    }\n\n    const accessToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onPost(\"/api/auth/register\").reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email,\n      username\n    } = JSON.parse(config.data);\n    const user = userList.find(user => user.email === email);\n\n    if (user) {\n      return [400, {\n        message: \"User already exists!\"\n      }];\n    }\n\n    const newUser = {\n      id: 2,\n      role: \"GUEST\",\n      name: \"\",\n      username: username,\n      email: email,\n      avatar: \"/static/avatar/001-man.svg\",\n      age: 25\n    };\n    userList.push(newUser);\n    const accessToken = jwt.sign({\n      userId: newUser.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: newUser.id,\n        avatar: newUser.avatar,\n        email: newUser.email,\n        name: newUser.name,\n        username: newUser.username,\n        role: newUser.role\n      }\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onGet(\"/api/auth/profile\").reply(config => {\n  try {\n    //@ts-ignore\n    const {\n      Authorization\n    } = config.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: \"Invalid Authorization token\"\n      }];\n    }\n\n    const accessToken = Authorization.split(\" \")[1];\n    const {\n      userId\n    } = jwt.verify(accessToken, JWT_SECRET);\n    const user = userList.find(u => u.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: \"Invalid authorization token\"\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});","map":{"version":3,"names":["jwt","Mock","JWT_SECRET","JWT_VALIDITY","userList","id","role","name","username","email","avatar","age","onPost","reply","config","Promise","resolve","setTimeout","JSON","parse","data","user","find","message","accessToken","sign","userId","expiresIn","error","console","newUser","push","onGet","Authorization","headers","split","verify","u","err"],"sources":["/home/victorgm1/Downloads/uko-js-2.0.0-ik4jj9/uko-js-2.0.0/src/__fakeData__/users.js"],"sourcesContent":["import jwt from \"jsonwebtoken\";\nimport Mock from \"./mock\";\nconst JWT_SECRET = \"jwt_secret_key\";\nconst JWT_VALIDITY = \"7 days\";\nconst userList = [\n  {\n    id: 1,\n    role: \"SA\",\n    name: \"Jason Alexander\",\n    username: \"jason_alexander\",\n    email: \"demo@example.com\",\n    avatar: \"/static/avatar/001-man.svg\",\n    age: 25, // password: 'v&)3?2]:'\n  },\n];\nMock.onPost(\"/api/auth/login\").reply(async (config) => {\n  try {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    const { email } = JSON.parse(config.data);\n    const user = userList.find((user) => user.email === email);\n\n    if (!user) {\n      return [\n        400,\n        {\n          message: \"Invalid email or password\",\n        },\n      ];\n    }\n\n    const accessToken = jwt.sign(\n      {\n        userId: user.id,\n      },\n      JWT_SECRET,\n      {\n        expiresIn: JWT_VALIDITY,\n      }\n    );\n    return [\n      200,\n      {\n        accessToken,\n        user: {\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        },\n      },\n    ];\n  } catch (error) {\n    console.error(error);\n    return [\n      500,\n      {\n        message: \"Internal server error\",\n      },\n    ];\n  }\n});\nMock.onPost(\"/api/auth/register\").reply(async (config) => {\n  try {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    const { email, username } = JSON.parse(config.data);\n    const user = userList.find((user) => user.email === email);\n\n    if (user) {\n      return [\n        400,\n        {\n          message: \"User already exists!\",\n        },\n      ];\n    }\n\n    const newUser = {\n      id: 2,\n      role: \"GUEST\",\n      name: \"\",\n      username: username,\n      email: email,\n      avatar: \"/static/avatar/001-man.svg\",\n      age: 25,\n    };\n    userList.push(newUser);\n    const accessToken = jwt.sign(\n      {\n        userId: newUser.id,\n      },\n      JWT_SECRET,\n      {\n        expiresIn: JWT_VALIDITY,\n      }\n    );\n    return [\n      200,\n      {\n        accessToken,\n        user: {\n          id: newUser.id,\n          avatar: newUser.avatar,\n          email: newUser.email,\n          name: newUser.name,\n          username: newUser.username,\n          role: newUser.role,\n        },\n      },\n    ];\n  } catch (error) {\n    console.error(error);\n    return [\n      500,\n      {\n        message: \"Internal server error\",\n      },\n    ];\n  }\n});\nMock.onGet(\"/api/auth/profile\").reply((config) => {\n  try {\n    //@ts-ignore\n    const { Authorization } = config.headers;\n\n    if (!Authorization) {\n      return [\n        401,\n        {\n          message: \"Invalid Authorization token\",\n        },\n      ];\n    }\n\n    const accessToken = Authorization.split(\" \")[1];\n    const { userId } = jwt.verify(accessToken, JWT_SECRET);\n    const user = userList.find((u) => u.id === userId);\n\n    if (!user) {\n      return [\n        401,\n        {\n          message: \"Invalid authorization token\",\n        },\n      ];\n    }\n\n    return [\n      200,\n      {\n        user: {\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        },\n      },\n    ];\n  } catch (err) {\n    console.error(err);\n    return [\n      500,\n      {\n        message: \"Internal server error\",\n      },\n    ];\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}