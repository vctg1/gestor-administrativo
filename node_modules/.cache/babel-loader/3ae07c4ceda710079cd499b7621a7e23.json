{"ast":null,"code":"/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/\nimport './main.css';\nimport { createRef, getStickyHeaderDates, createElement, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, renderScrollShim, DateComponent, buildNavLinkAttrs, DayCellContent, Fragment, BaseComponent, createFormatter, StandardEvent, buildSegTimeText, EventRoot, getSegAnchorAttrs, memoize, MoreLinkRoot, getSegMeta, createAriaClickAttrs, getUniqueDomId, setRef, DayCellRoot, WeekNumberRoot, buildEntryKey, intersectSpans, SegHierarchy, intersectRanges, addDays, RefMap, sortEventSegs, isPropsEqual, buildEventRangeKey, BgEvent, renderFill, PositionCache, NowTimer, Slicer, DayHeader, DaySeriesModel, DayTableModel, addWeeks, diffWeeks, DateProfileGenerator, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign, __spreadArray } from 'tslib';\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nvar TableView =\n/** @class */\nfunction (_super) {\n  __extends(TableView, _super);\n\n  function TableView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.headerElRef = createRef();\n    return _this;\n  }\n\n  TableView.prototype.renderSimpleLayout = function (headerRowContent, bodyContent) {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: {\n        content: bodyContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-daygrid'].concat(classNames).join(' ')\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: []\n        /* TODO: make optional? */\n        ,\n        sections: sections\n      }));\n    });\n  };\n\n  TableView.prototype.renderHScrollLayout = function (headerRowContent, bodyContent, colCnt, dayMinWidth) {\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent\n      }]\n    });\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim\n        }]\n      });\n    }\n\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-daygrid'].concat(classNames).join(' ')\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        colGroups: [{\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n\n  return TableView;\n}(DateComponent);\n\nfunction splitSegsByRow(segs, rowCnt) {\n  var byRow = [];\n\n  for (var i = 0; i < rowCnt; i += 1) {\n    byRow[i] = [];\n  }\n\n  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n    var seg = segs_1[_i];\n    byRow[seg.row].push(seg);\n  }\n\n  return byRow;\n}\n\nfunction splitSegsByFirstCol(segs, colCnt) {\n  var byCol = [];\n\n  for (var i = 0; i < colCnt; i += 1) {\n    byCol[i] = [];\n  }\n\n  for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n    var seg = segs_2[_i];\n    byCol[seg.firstCol].push(seg);\n  }\n\n  return byCol;\n}\n\nfunction splitInteractionByRow(ui, rowCnt) {\n  var byRow = [];\n\n  if (!ui) {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.row].segs.push(seg);\n    }\n  }\n\n  return byRow;\n}\n\nvar TableCellTop =\n/** @class */\nfunction (_super) {\n  __extends(TableCellTop, _super);\n\n  function TableCellTop() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableCellTop.prototype.render = function () {\n    var props = this.props;\n    var navLinkAttrs = buildNavLinkAttrs(this.context, props.date);\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      defaultContent: renderTopInner\n    }, function (innerElRef, innerContent) {\n      return (innerContent || props.forceDayTop) && createElement(\"div\", {\n        className: \"fc-daygrid-day-top\",\n        ref: innerElRef\n      }, createElement(\"a\", __assign({\n        id: props.dayNumberId,\n        className: \"fc-daygrid-day-number\"\n      }, navLinkAttrs), innerContent || createElement(Fragment, null, \"\\u00A0\")));\n    });\n  };\n\n  return TableCellTop;\n}(BaseComponent);\n\nfunction renderTopInner(props) {\n  return props.dayNumberText;\n}\n\nvar DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow'\n});\n\nfunction hasListItemDisplay(seg) {\n  var display = seg.eventRange.ui.display;\n  return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol && // can't be multi-day\n  seg.isStart && // \"\n  seg.isEnd // \"\n  ;\n}\n\nvar TableBlockEvent =\n/** @class */\nfunction (_super) {\n  __extends(TableBlockEvent, _super);\n\n  function TableBlockEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableBlockEvent.prototype.render = function () {\n    var props = this.props;\n    return createElement(StandardEvent, __assign({}, props, {\n      extraClassNames: ['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event'],\n      defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n      defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n      disableResizing: !props.seg.eventRange.def.allDay\n    }));\n  };\n\n  return TableBlockEvent;\n}(BaseComponent);\n\nvar TableListItemEvent =\n/** @class */\nfunction (_super) {\n  __extends(TableListItemEvent, _super);\n\n  function TableListItemEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableListItemEvent.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n    var timeText = buildSegTimeText(props.seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n    return createElement(EventRoot, {\n      seg: props.seg,\n      timeText: timeText,\n      defaultContent: renderInnerContent,\n      isDragging: props.isDragging,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: props.isSelected,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return (// we don't use styles!\n        createElement(\"a\", __assign({\n          className: ['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' '),\n          ref: rootElRef\n        }, getSegAnchorAttrs(props.seg, context)), innerContent)\n      );\n    });\n  };\n\n  return TableListItemEvent;\n}(BaseComponent);\n\nfunction renderInnerContent(innerProps) {\n  return createElement(Fragment, null, createElement(\"div\", {\n    className: \"fc-daygrid-event-dot\",\n    style: {\n      borderColor: innerProps.borderColor || innerProps.backgroundColor\n    }\n  }), innerProps.timeText && createElement(\"div\", {\n    className: \"fc-event-time\"\n  }, innerProps.timeText), createElement(\"div\", {\n    className: \"fc-event-title\"\n  }, innerProps.event.title || createElement(Fragment, null, \"\\u00A0\")));\n}\n\nvar TableCellMoreLink =\n/** @class */\nfunction (_super) {\n  __extends(TableCellMoreLink, _super);\n\n  function TableCellMoreLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.compileSegs = memoize(compileSegs);\n    return _this;\n  }\n\n  TableCellMoreLink.prototype.render = function () {\n    var props = this.props;\n\n    var _a = this.compileSegs(props.singlePlacements),\n        allSegs = _a.allSegs,\n        invisibleSegs = _a.invisibleSegs;\n\n    return createElement(MoreLinkRoot, {\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      allDayDate: props.allDayDate,\n      moreCnt: props.moreCnt,\n      allSegs: allSegs,\n      hiddenSegs: invisibleSegs,\n      alignmentElRef: props.alignmentElRef,\n      alignGridTop: props.alignGridTop,\n      extraDateSpan: props.extraDateSpan,\n      popoverContent: function () {\n        var isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n        return createElement(Fragment, null, allSegs.map(function (seg) {\n          var instanceId = seg.eventRange.instance.instanceId;\n          return createElement(\"div\", {\n            className: \"fc-daygrid-event-harness\",\n            key: instanceId,\n            style: {\n              visibility: isForcedInvisible[instanceId] ? 'hidden' : ''\n            }\n          }, hasListItemDisplay(seg) ? createElement(TableListItemEvent, __assign({\n            seg: seg,\n            isDragging: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, getSegMeta(seg, props.todayRange))) : createElement(TableBlockEvent, __assign({\n            seg: seg,\n            isDragging: false,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, getSegMeta(seg, props.todayRange))));\n        }));\n      }\n    }, function (rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n      return createElement(\"a\", __assign({\n        ref: rootElRef,\n        className: ['fc-daygrid-more-link'].concat(classNames).join(' '),\n        title: title,\n        \"aria-expanded\": isExpanded,\n        \"aria-controls\": popoverId\n      }, createAriaClickAttrs(handleClick)), innerContent);\n    });\n  };\n\n  return TableCellMoreLink;\n}(BaseComponent);\n\nfunction compileSegs(singlePlacements) {\n  var allSegs = [];\n  var invisibleSegs = [];\n\n  for (var _i = 0, singlePlacements_1 = singlePlacements; _i < singlePlacements_1.length; _i++) {\n    var placement = singlePlacements_1[_i];\n    allSegs.push(placement.seg);\n\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg);\n    }\n  }\n\n  return {\n    allSegs: allSegs,\n    invisibleSegs: invisibleSegs\n  };\n}\n\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'narrow'\n});\n\nvar TableCell =\n/** @class */\nfunction (_super) {\n  __extends(TableCell, _super);\n\n  function TableCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    _this.state = {\n      dayNumberId: getUniqueDomId()\n    };\n\n    _this.handleRootEl = function (el) {\n      setRef(_this.rootElRef, el);\n      setRef(_this.props.elRef, el);\n    };\n\n    return _this;\n  }\n\n  TableCell.prototype.render = function () {\n    var _a = this,\n        context = _a.context,\n        props = _a.props,\n        state = _a.state,\n        rootElRef = _a.rootElRef;\n\n    var date = props.date,\n        dateProfile = props.dateProfile;\n    var navLinkAttrs = buildNavLinkAttrs(context, date, 'week');\n    return createElement(DayCellRoot, {\n      date: date,\n      dateProfile: dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      elRef: this.handleRootEl\n    }, function (dayElRef, dayClassNames, rootDataAttrs, isDisabled) {\n      return createElement(\"td\", __assign({\n        ref: dayElRef,\n        role: \"gridcell\",\n        className: ['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')\n      }, rootDataAttrs, props.extraDataAttrs, props.showDayNumber ? {\n        'aria-labelledby': state.dayNumberId\n      } : {}), createElement(\"div\", {\n        className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n        ref: props.innerElRef\n        /* different from hook system! RENAME */\n\n      }, props.showWeekNumber && createElement(WeekNumberRoot, {\n        date: date,\n        defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n      }, function (weekElRef, weekClassNames, innerElRef, innerContent) {\n        return createElement(\"a\", __assign({\n          ref: weekElRef,\n          className: ['fc-daygrid-week-number'].concat(weekClassNames).join(' ')\n        }, navLinkAttrs), innerContent);\n      }), !isDisabled && createElement(TableCellTop, {\n        date: date,\n        dateProfile: dateProfile,\n        showDayNumber: props.showDayNumber,\n        dayNumberId: state.dayNumberId,\n        forceDayTop: props.forceDayTop,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      }), createElement(\"div\", {\n        className: \"fc-daygrid-day-events\",\n        ref: props.fgContentElRef\n      }, props.fgContent, createElement(\"div\", {\n        className: \"fc-daygrid-day-bottom\",\n        style: {\n          marginTop: props.moreMarginTop\n        }\n      }, createElement(TableCellMoreLink, {\n        allDayDate: date,\n        singlePlacements: props.singlePlacements,\n        moreCnt: props.moreCnt,\n        alignmentElRef: rootElRef,\n        alignGridTop: !props.showDayNumber,\n        extraDateSpan: props.extraDateSpan,\n        dateProfile: props.dateProfile,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        todayRange: props.todayRange\n      }))), createElement(\"div\", {\n        className: \"fc-daygrid-day-bg\"\n      }, props.bgContent)));\n    });\n  };\n\n  return TableCell;\n}(DateComponent);\n\nfunction computeFgSegPlacement(segs, // assumed already sorted\ndayMaxEvents, dayMaxEventRows, strictOrder, eventInstanceHeights, maxContentHeight, cells) {\n  var hierarchy = new DayGridSegHierarchy();\n  hierarchy.allowReslicing = true;\n  hierarchy.strictOrder = strictOrder;\n\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight;\n    hierarchy.hiddenConsumes = true;\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents;\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows;\n    hierarchy.hiddenConsumes = true;\n  } // create segInputs only for segs with known heights\n\n\n  var segInputs = [];\n  var unknownHeightSegs = [];\n\n  for (var i = 0; i < segs.length; i += 1) {\n    var seg = segs[i];\n    var instanceId = seg.eventRange.instance.instanceId;\n    var eventHeight = eventInstanceHeights[instanceId];\n\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1\n        }\n      });\n    } else {\n      unknownHeightSegs.push(seg);\n    }\n  }\n\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var segRects = hierarchy.toRects();\n\n  var _a = placeRects(segRects, segs, cells),\n      singleColPlacements = _a.singleColPlacements,\n      multiColPlacements = _a.multiColPlacements,\n      leftoverMargins = _a.leftoverMargins;\n\n  var moreCnts = [];\n  var moreMarginTops = []; // add segs with unknown heights\n\n  for (var _i = 0, unknownHeightSegs_1 = unknownHeightSegs; _i < unknownHeightSegs_1.length; _i++) {\n    var seg = unknownHeightSegs_1[_i];\n    multiColPlacements[seg.firstCol].push({\n      seg: seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n\n    for (var col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  } // add the hidden entries\n\n\n  for (var col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0);\n  }\n\n  for (var _b = 0, hiddenEntries_1 = hiddenEntries; _b < hiddenEntries_1.length; _b++) {\n    var hiddenEntry = hiddenEntries_1[_b];\n    var seg = segs[hiddenEntry.index];\n    var hiddenSpan = hiddenEntry.span;\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n\n    for (var col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1;\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  } // deal with leftover margins\n\n\n  for (var col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col]);\n  }\n\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    moreCnts: moreCnts,\n    moreMarginTops: moreMarginTops\n  };\n} // rects ordered by top coord, then left\n\n\nfunction placeRects(allRects, segs, cells) {\n  var rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n  var singleColPlacements = [];\n  var multiColPlacements = [];\n  var leftoverMargins = [];\n\n  for (var col = 0; col < cells.length; col += 1) {\n    var rects = rectsByEachCol[col]; // compute all static segs in singlePlacements\n\n    var singlePlacements = [];\n    var currentHeight = 0;\n    var currentMarginTop = 0;\n\n    for (var _i = 0, rects_1 = rects; _i < rects_1.length; _i++) {\n      var rect = rects_1[_i];\n      var seg = segs[rect.index];\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight\n      });\n      currentHeight = rect.levelCoord + rect.thickness;\n    } // compute mixed static/absolute segs in multiPlacements\n\n\n    var multiPlacements = [];\n    currentHeight = 0;\n    currentMarginTop = 0;\n\n    for (var _a = 0, rects_2 = rects; _a < rects_2.length; _a++) {\n      var rect = rects_2[_a];\n      var seg = segs[rect.index];\n      var isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?\n\n      var isFirstCol = rect.span.start === col;\n      currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n\n      currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg\n\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness;\n\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0\n          });\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop // claim the margin\n\n        });\n        currentMarginTop = 0;\n      }\n    }\n\n    singleColPlacements.push(singlePlacements);\n    multiColPlacements.push(multiPlacements);\n    leftoverMargins.push(currentMarginTop);\n  }\n\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    leftoverMargins: leftoverMargins\n  };\n}\n\nfunction groupRectsByEachCol(rects, colCnt) {\n  var rectsByEachCol = [];\n\n  for (var col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([]);\n  }\n\n  for (var _i = 0, rects_3 = rects; _i < rects_3.length; _i++) {\n    var rect = rects_3[_i];\n\n    for (var col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect);\n    }\n  }\n\n  return rectsByEachCol;\n}\n\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg;\n  }\n\n  var eventRange = seg.eventRange;\n  var origRange = eventRange.range;\n  var slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1)\n  });\n  return __assign(__assign({}, seg), {\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: __assign(__assign({}, eventRange.ui), {\n        durationEditable: false\n      }),\n      instance: eventRange.instance,\n      range: slicedRange\n    },\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n  });\n}\n\nvar DayGridSegHierarchy =\n/** @class */\nfunction (_super) {\n  __extends(DayGridSegHierarchy, _super);\n\n  function DayGridSegHierarchy() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // config\n\n\n    _this.hiddenConsumes = false; // allows us to keep hidden entries in the hierarchy so they take up space\n\n    _this.forceHidden = {};\n    return _this;\n  }\n\n  DayGridSegHierarchy.prototype.addSegs = function (segInputs) {\n    var _this = this;\n\n    var hiddenSegs = _super.prototype.addSegs.call(this, segInputs);\n\n    var entriesByLevel = this.entriesByLevel;\n\n    var excludeHidden = function (entry) {\n      return !_this.forceHidden[buildEntryKey(entry)];\n    }; // remove the forced-hidden segs\n\n\n    for (var level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n    }\n\n    return hiddenSegs;\n  };\n\n  DayGridSegHierarchy.prototype.handleInvalidInsertion = function (insertion, entry, hiddenEntries) {\n    var _a = this,\n        entriesByLevel = _a.entriesByLevel,\n        forceHidden = _a.forceHidden;\n\n    var touchingEntry = insertion.touchingEntry,\n        touchingLevel = insertion.touchingLevel,\n        touchingLateral = insertion.touchingLateral;\n\n    if (this.hiddenConsumes && touchingEntry) {\n      var touchingEntryId = buildEntryKey(touchingEntry); // if not already hidden\n\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          var placeholderEntry = __assign(__assign({}, touchingEntry), {\n            span: intersectSpans(touchingEntry.span, entry.span)\n          });\n\n          var placeholderEntryId = buildEntryKey(placeholderEntry);\n          forceHidden[placeholderEntryId] = true;\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry; // replace touchingEntry with our placeholder\n\n          this.splitEntry(touchingEntry, entry, hiddenEntries); // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true;\n          hiddenEntries.push(touchingEntry);\n        }\n      }\n    }\n\n    return _super.prototype.handleInvalidInsertion.call(this, insertion, entry, hiddenEntries);\n  };\n\n  return DayGridSegHierarchy;\n}(SegHierarchy);\n\nvar TableRow =\n/** @class */\nfunction (_super) {\n  __extends(TableRow, _super);\n\n  function TableRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cellElRefs = new RefMap(); // the <td>\n\n    _this.frameElRefs = new RefMap(); // the fc-daygrid-day-frame\n\n    _this.fgElRefs = new RefMap(); // the fc-daygrid-day-events\n\n    _this.segHarnessRefs = new RefMap(); // indexed by \"instanceId:firstCol\"\n\n    _this.rootElRef = createRef();\n    _this.state = {\n      framePositions: null,\n      maxContentHeight: null,\n      eventInstanceHeights: {}\n    };\n    return _this;\n  }\n\n  TableRow.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        state = _a.state,\n        context = _a.context;\n\n    var options = context.options;\n    var colCnt = props.cells.length;\n    var businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n    var bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n    var highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n    var mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n\n    var _b = computeFgSegPlacement(sortEventSegs(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.eventInstanceHeights, state.maxContentHeight, props.cells),\n        singleColPlacements = _b.singleColPlacements,\n        multiColPlacements = _b.multiColPlacements,\n        moreCnts = _b.moreCnts,\n        moreMarginTops = _b.moreMarginTops;\n\n    var isForcedInvisible = // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    return createElement(\"tr\", {\n      ref: this.rootElRef,\n      role: \"row\"\n    }, props.renderIntro && props.renderIntro(), props.cells.map(function (cell, col) {\n      var normalFgNodes = _this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n\n      var mirrorFgNodes = _this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n\n      return createElement(TableCell, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        innerElRef: _this.frameElRefs.createRef(cell.key)\n        /* FF <td> problem, but okay to use for left/right. TODO: rename prop */\n        ,\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        showDayNumber: props.showDayNumbers,\n        showWeekNumber: props.showWeekNumbers && col === 0,\n        forceDayTop: props.showWeekNumbers\n        /* even displaying weeknum for row, not necessarily day */\n        ,\n        todayRange: props.todayRange,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        moreCnt: moreCnts[col],\n        moreMarginTop: moreMarginTops[col],\n        singlePlacements: singleColPlacements[col],\n        fgContentElRef: _this.fgElRefs.createRef(cell.key),\n        fgContent: // Fragment scopes the keys\n        createElement(Fragment, null, createElement(Fragment, null, normalFgNodes), createElement(Fragment, null, mirrorFgNodes)),\n        bgContent: // Fragment scopes the keys\n        createElement(Fragment, null, _this.renderFillSegs(highlightSegsByCol[col], 'highlight'), _this.renderFillSegs(businessHoursByCol[col], 'non-business'), _this.renderFillSegs(bgEventSegsByCol[col], 'bg-event'))\n      });\n    }));\n  };\n\n  TableRow.prototype.componentDidMount = function () {\n    this.updateSizing(true);\n  };\n\n  TableRow.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var currentProps = this.props;\n    this.updateSizing(!isPropsEqual(prevProps, currentProps));\n  };\n\n  TableRow.prototype.getHighlightSegs = function () {\n    var props = this.props;\n\n    if (props.eventDrag && props.eventDrag.segs.length) {\n      // messy check\n      return props.eventDrag.segs;\n    }\n\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n\n    return props.dateSelectionSegs;\n  };\n\n  TableRow.prototype.getMirrorSegs = function () {\n    var props = this.props;\n\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n\n    return [];\n  };\n\n  TableRow.prototype.renderFgSegs = function (col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n    var context = this.context;\n    var eventSelection = this.props.eventSelection;\n    var framePositions = this.state.framePositions;\n    var defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n\n    var isMirror = isDragging || isResizing || isDateSelecting;\n    var nodes = [];\n\n    if (framePositions) {\n      for (var _i = 0, segPlacements_1 = segPlacements; _i < segPlacements_1.length; _i++) {\n        var placement = segPlacements_1[_i];\n        var seg = placement.seg;\n        var instanceId = seg.eventRange.instance.instanceId;\n        var key = instanceId + ':' + col;\n        var isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n        var isAbsolute = placement.isAbsolute;\n        var left = '';\n        var right = '';\n\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0;\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n          } else {\n            left = 0;\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n          }\n        }\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n\n\n        nodes.push(createElement(\"div\", {\n          className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),\n          key: key,\n          ref: isMirror ? null : this.segHarnessRefs.createRef(key),\n          style: {\n            visibility: isVisible ? '' : 'hidden',\n            marginTop: isAbsolute ? '' : placement.marginTop,\n            top: isAbsolute ? placement.absoluteTop : '',\n            left: left,\n            right: right\n          }\n        }, hasListItemDisplay(seg) ? createElement(TableListItemEvent, __assign({\n          seg: seg,\n          isDragging: isDragging,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, getSegMeta(seg, todayRange))) : createElement(TableBlockEvent, __assign({\n          seg: seg,\n          isDragging: isDragging,\n          isResizing: isResizing,\n          isDateSelecting: isDateSelecting,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, getSegMeta(seg, todayRange)))));\n      }\n    }\n\n    return nodes;\n  };\n\n  TableRow.prototype.renderFillSegs = function (segs, fillType) {\n    var isRtl = this.context.isRtl;\n    var todayRange = this.props.todayRange;\n    var framePositions = this.state.framePositions;\n    var nodes = [];\n\n    if (framePositions) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        var leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n        };\n        nodes.push(createElement(\"div\", {\n          key: buildEventRangeKey(seg.eventRange),\n          className: \"fc-daygrid-bg-harness\",\n          style: leftRightCss\n        }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n          seg: seg\n        }, getSegMeta(seg, todayRange))) : renderFill(fillType)));\n      }\n    }\n\n    return createElement.apply(void 0, __spreadArray([Fragment, {}], nodes));\n  };\n\n  TableRow.prototype.updateSizing = function (isExternalSizingChange) {\n    var _a = this,\n        props = _a.props,\n        frameElRefs = _a.frameElRefs;\n\n    if (!props.forPrint && props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        var frameEls = props.cells.map(function (cell) {\n          return frameElRefs.currentMap[cell.key];\n        });\n\n        if (frameEls.length) {\n          var originEl = this.rootElRef.current;\n          this.setState({\n            framePositions: new PositionCache(originEl, frameEls, true, // isHorizontal\n            false)\n          });\n        }\n      }\n\n      var oldInstanceHeights = this.state.eventInstanceHeights;\n      var newInstanceHeights = this.queryEventInstanceHeights();\n      var limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n      this.setState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: __assign(__assign({}, oldInstanceHeights), newInstanceHeights),\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n      });\n    }\n  };\n\n  TableRow.prototype.queryEventInstanceHeights = function () {\n    var segElMap = this.segHarnessRefs.currentMap;\n    var eventInstanceHeights = {}; // get the max height amongst instance segs\n\n    for (var key in segElMap) {\n      var height = Math.round(segElMap[key].getBoundingClientRect().height);\n      var instanceId = key.split(':')[0]; // deconstruct how renderFgSegs makes the key\n\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height);\n    }\n\n    return eventInstanceHeights;\n  };\n\n  TableRow.prototype.computeMaxContentHeight = function () {\n    var firstKey = this.props.cells[0].key;\n    var cellEl = this.cellElRefs.currentMap[firstKey];\n    var fcContainerEl = this.fgElRefs.currentMap[firstKey];\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n  };\n\n  TableRow.prototype.getCellEls = function () {\n    var elMap = this.cellElRefs.currentMap;\n    return this.props.cells.map(function (cell) {\n      return elMap[cell.key];\n    });\n  };\n\n  return TableRow;\n}(DateComponent);\n\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual\n});\n\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n  if (!mirrorSegs.length) {\n    return [];\n  }\n\n  var topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n\n  return mirrorSegs.map(function (seg) {\n    return {\n      seg: seg,\n      isVisible: true,\n      isAbsolute: true,\n      absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n      marginTop: 0\n    };\n  });\n}\n\nfunction buildAbsoluteTopHash(colPlacements) {\n  var topsByInstanceId = {};\n\n  for (var _i = 0, colPlacements_1 = colPlacements; _i < colPlacements_1.length; _i++) {\n    var placements = colPlacements_1[_i];\n\n    for (var _a = 0, placements_1 = placements; _a < placements_1.length; _a++) {\n      var placement = placements_1[_a];\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n    }\n  }\n\n  return topsByInstanceId;\n}\n\nvar Table =\n/** @class */\nfunction (_super) {\n  __extends(Table, _super);\n\n  function Table() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.splitBusinessHourSegs = memoize(splitSegsByRow);\n    _this.splitBgEventSegs = memoize(splitSegsByRow);\n    _this.splitFgEventSegs = memoize(splitSegsByRow);\n    _this.splitDateSelectionSegs = memoize(splitSegsByRow);\n    _this.splitEventDrag = memoize(splitInteractionByRow);\n    _this.splitEventResize = memoize(splitInteractionByRow);\n    _this.rowRefs = new RefMap();\n\n    _this.handleRootEl = function (rootEl) {\n      _this.rootEl = rootEl;\n\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl,\n          isHitComboAllowed: _this.props.isHitComboAllowed\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    return _this;\n  }\n\n  Table.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var dateProfile = props.dateProfile,\n        dayMaxEventRows = props.dayMaxEventRows,\n        dayMaxEvents = props.dayMaxEvents,\n        expandRows = props.expandRows;\n    var rowCnt = props.cells.length;\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n    var limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true; // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false;\n      dayMaxEventRows = null;\n      dayMaxEvents = null;\n    }\n\n    var classNames = ['fc-daygrid-body', limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', expandRows ? '' : 'fc-daygrid-body-natural' // will height of one row depend on the others?\n    ];\n    return createElement(\"div\", {\n      className: classNames.join(' '),\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      return createElement(Fragment, null, createElement(\"table\", {\n        role: \"presentation\",\n        className: \"fc-scrollgrid-sync-table\",\n        style: {\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n          height: expandRows ? props.clientHeight : ''\n        }\n      }, props.colGroupNode, createElement(\"tbody\", {\n        role: \"presentation\"\n      }, props.cells.map(function (cells, row) {\n        return createElement(TableRow, {\n          ref: _this.rowRefs.createRef(row),\n          key: cells.length ? cells[0].date.toISOString()\n          /* best? or put key on cell? or use diff formatter? */\n          : row // in case there are no cells (like when resource view is loading)\n          ,\n          showDayNumbers: rowCnt > 1,\n          showWeekNumbers: props.showWeekNumbers,\n          todayRange: todayRange,\n          dateProfile: dateProfile,\n          cells: cells,\n          renderIntro: props.renderRowIntro,\n          businessHourSegs: businessHourSegsByRow[row],\n          eventSelection: props.eventSelection,\n          bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay)\n          /* hack */\n          ,\n          fgEventSegs: fgEventSegsByRow[row],\n          dateSelectionSegs: dateSelectionSegsByRow[row],\n          eventDrag: eventDragByRow[row],\n          eventResize: eventResizeByRow[row],\n          dayMaxEvents: dayMaxEvents,\n          dayMaxEventRows: dayMaxEventRows,\n          clientWidth: props.clientWidth,\n          clientHeight: props.clientHeight,\n          forPrint: props.forPrint\n        });\n      }))));\n    }));\n  }; // Hit System\n  // ----------------------------------------------------------------------------------------------------\n\n\n  Table.prototype.prepareHits = function () {\n    this.rowPositions = new PositionCache(this.rootEl, this.rowRefs.collect().map(function (rowObj) {\n      return rowObj.getCellEls()[0];\n    }), // first cell el in each row. TODO: not optimal\n    false, true);\n    this.colPositions = new PositionCache(this.rootEl, this.rowRefs.currentMap[0].getCellEls(), // cell els in first row\n    true, // horizontal\n    false);\n  };\n\n  Table.prototype.queryHit = function (positionLeft, positionTop) {\n    var _a = this,\n        colPositions = _a.colPositions,\n        rowPositions = _a.rowPositions;\n\n    var col = colPositions.leftToIndex(positionLeft);\n    var row = rowPositions.topToIndex(positionTop);\n\n    if (row != null && col != null) {\n      var cell = this.props.cells[row][col];\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: __assign({\n          range: this.getCellRange(row, col),\n          allDay: true\n        }, cell.extraDateSpan),\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row]\n        },\n        layer: 0\n      };\n    }\n\n    return null;\n  };\n\n  Table.prototype.getCellEl = function (row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n  };\n\n  Table.prototype.getCellRange = function (row, col) {\n    var start = this.props.cells[row][col].date;\n    var end = addDays(start, 1);\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  return Table;\n}(DateComponent);\n\nfunction isSegAllDay(seg) {\n  return seg.eventRange.def.allDay;\n}\n\nvar DayTableSlicer =\n/** @class */\nfunction (_super) {\n  __extends(DayTableSlicer, _super);\n\n  function DayTableSlicer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.forceDayIfListItem = true;\n    return _this;\n  }\n\n  DayTableSlicer.prototype.sliceRange = function (dateRange, dayTableModel) {\n    return dayTableModel.sliceRange(dateRange);\n  };\n\n  return DayTableSlicer;\n}(Slicer);\n\nvar DayTable =\n/** @class */\nfunction (_super) {\n  __extends(DayTable, _super);\n\n  function DayTable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.slicer = new DayTableSlicer();\n    _this.tableRef = createRef();\n    return _this;\n  }\n\n  DayTable.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    return createElement(Table, __assign({\n      ref: this.tableRef\n    }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n      dateProfile: props.dateProfile,\n      cells: props.dayTableModel.cells,\n      colGroupNode: props.colGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      renderRowIntro: props.renderRowIntro,\n      dayMaxEvents: props.dayMaxEvents,\n      dayMaxEventRows: props.dayMaxEventRows,\n      showWeekNumbers: props.showWeekNumbers,\n      expandRows: props.expandRows,\n      headerAlignElRef: props.headerAlignElRef,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      forPrint: props.forPrint\n    }));\n  };\n\n  return DayTable;\n}(DateComponent);\n\nvar DayTableView =\n/** @class */\nfunction (_super) {\n  __extends(DayTableView, _super);\n\n  function DayTableView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDayTableModel = memoize(buildDayTableModel);\n    _this.headerRef = createRef();\n    _this.tableRef = createRef();\n    return _this;\n  }\n\n  DayTableView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.context,\n        options = _a.options,\n        dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      ref: this.headerRef,\n      dateProfile: props.dateProfile,\n      dates: dayTableModel.headerDates,\n      datesRepDistinctDays: dayTableModel.rowCnt === 1\n    });\n\n    var bodyContent = function (contentArg) {\n      return createElement(DayTable, {\n        ref: _this.tableRef,\n        dateProfile: props.dateProfile,\n        dayTableModel: dayTableModel,\n        businessHours: props.businessHours,\n        dateSelection: props.dateSelection,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        nextDayThreshold: options.nextDayThreshold,\n        colGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        dayMaxEvents: options.dayMaxEvents,\n        dayMaxEventRows: options.dayMaxEventRows,\n        showWeekNumbers: options.weekNumbers,\n        expandRows: !props.isHeightAuto,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      });\n    };\n\n    return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n  };\n\n  return DayTableView;\n}(TableView);\n\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\n\nvar TableDateProfileGenerator =\n/** @class */\nfunction (_super) {\n  __extends(TableDateProfileGenerator, _super);\n\n  function TableDateProfileGenerator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // Computes the date range that will be rendered.\n\n\n  TableDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n    var dateEnv = this.props.dateEnv;\n\n    var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n\n    var start = renderRange.start;\n    var end = renderRange.end;\n    var endOfWeek; // year and month views should be aligned with weeks. this is already done for week\n\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start); // make end-of-week if not already\n\n      endOfWeek = dateEnv.startOfWeek(end);\n\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1);\n      }\n    } // ensure 6 weeks\n\n\n    if (this.props.monthMode && this.props.fixedWeekCount) {\n      var rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n      diffWeeks(start, end));\n      end = addWeeks(end, 6 - rowCnt);\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  return TableDateProfileGenerator;\n}(DateProfileGenerator);\n\nvar main = createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator\n    },\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: {\n        days: 1\n      }\n    },\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: {\n        weeks: 1\n      }\n    },\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: {\n        months: 1\n      },\n      monthMode: true,\n      fixedWeekCount: true\n    }\n  }\n});\nexport default main;\nexport { DayTableView as DayGridView, DayTable, DayTableSlicer, Table, TableView, buildDayTableModel };","map":{"version":3,"sources":["src/TableView.tsx","src/TableSeg.ts","src/TableCellTop.tsx","src/event-rendering.ts","src/TableBlockEvent.tsx","src/TableListItemEvent.tsx","src/TableCellMoreLink.tsx","src/TableCell.tsx","src/event-placement.ts","src/TableRow.tsx","src/Table.tsx","src/DayTableSlicer.tsx","src/DayTable.tsx","src/DayTableView.tsx","src/TableDateProfileGenerator.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  VNode, createElement,\n  SimpleScrollGrid,\n  SimpleScrollGridSection,\n  ChunkContentCallbackArgs,\n  createRef,\n  ScrollGridSectionConfig,\n  ViewRoot,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  ChunkConfigRowContent,\n  Dictionary,\n} from '@fullcalendar/common'\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nexport abstract class TableView<State=Dictionary> extends DateComponent<ViewProps, State> {\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n\n  renderSimpleLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n  ) {\n    let { props, context } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: { content: bodyContent },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[] /* TODO: make optional? */}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n    colCnt: number,\n    dayMinWidth: number,\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { props, context } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        }],\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent,\n      }],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim,\n        }],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              colGroups={[{ cols: [{ span: colCnt, minWidth: dayMinWidth }] }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n}\n","import { EventSegUiInteractionState, Seg } from '@fullcalendar/common'\n\n// this is a DATA STRUCTURE, not a component\n\nexport interface TableSeg extends Seg {\n  row: number\n  firstCol: number\n  lastCol: number\n}\n\nexport function splitSegsByRow(segs: TableSeg[], rowCnt: number) {\n  let byRow: TableSeg[][] = []\n\n  for (let i = 0; i < rowCnt; i += 1) {\n    byRow[i] = []\n  }\n\n  for (let seg of segs) {\n    byRow[seg.row].push(seg)\n  }\n\n  return byRow\n}\n\nexport function splitSegsByFirstCol(segs: TableSeg[], colCnt: number) {\n  let byCol: TableSeg[][] = []\n\n  for (let i = 0; i < colCnt; i += 1) {\n    byCol[i] = []\n  }\n\n  for (let seg of segs) {\n    byCol[seg.firstCol].push(seg)\n  }\n\n  return byCol\n}\n\nexport function splitInteractionByRow(ui: EventSegUiInteractionState | null, rowCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.row].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import {\n  createElement,\n  DateMarker,\n  DateRange,\n  DayCellContentArg,\n  DayCellContent,\n  BaseComponent,\n  DateProfile,\n  Dictionary,\n  Fragment,\n  buildNavLinkAttrs,\n} from '@fullcalendar/common'\n\ninterface TableCellTopProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  showDayNumber: boolean\n  dayNumberId: string\n  forceDayTop: boolean // hack to force-create an element with height (created by a nbsp)\n  todayRange: DateRange\n  extraHookProps?: Dictionary\n}\n\nexport class TableCellTop extends BaseComponent<TableCellTopProps> {\n  render() {\n    let { props } = this\n    let navLinkAttrs = buildNavLinkAttrs(this.context, props.date)\n\n    return (\n      <DayCellContent\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        defaultContent={renderTopInner}\n      >\n        {(innerElRef, innerContent) => (\n          (innerContent || props.forceDayTop) && (\n            <div className=\"fc-daygrid-day-top\" ref={innerElRef}>\n              <a\n                id={props.dayNumberId}\n                className=\"fc-daygrid-day-number\"\n                {...navLinkAttrs}\n              >\n                {innerContent || <Fragment>&nbsp;</Fragment>}\n              </a>\n            </div>\n          )\n        )}\n      </DayCellContent>\n    )\n  }\n}\n\nfunction renderTopInner(props: DayCellContentArg) {\n  return props.dayNumberText\n}\n","import { createFormatter } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport const DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow',\n})\n\nexport function hasListItemDisplay(seg: TableSeg) {\n  let { display } = seg.eventRange.ui\n\n  return display === 'list-item' || (\n    display === 'auto' &&\n    !seg.eventRange.def.allDay &&\n    seg.firstCol === seg.lastCol && // can't be multi-day\n    seg.isStart && // \"\n    seg.isEnd // \"\n  )\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps } from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface TableBlockEventProps extends MinimalEventProps {\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableBlockEvent extends BaseComponent<TableBlockEventProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <StandardEvent\n        {...props}\n        extraClassNames={['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event']}\n        defaultTimeFormat={DEFAULT_TABLE_EVENT_TIME_FORMAT}\n        defaultDisplayEventEnd={props.defaultDisplayEventEnd}\n        disableResizing={!props.seg.eventRange.def.allDay}\n      />\n    )\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  Seg,\n  EventRoot,\n  buildSegTimeText,\n  EventContentArg,\n  Fragment,\n  getSegAnchorAttrs,\n} from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface DotTableEventProps {\n  seg: Seg\n  isDragging: boolean\n  isSelected: boolean\n  isPast: boolean\n  isFuture: boolean\n  isToday: boolean\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableListItemEvent extends BaseComponent<DotTableEventProps> {\n  render() {\n    let { props, context } = this\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT\n    let timeText = buildSegTimeText(\n      props.seg,\n      timeFormat,\n      context,\n      true,\n      props.defaultDisplayEventEnd,\n    )\n\n    return (\n      <EventRoot\n        seg={props.seg}\n        timeText={timeText}\n        defaultContent={renderInnerContent}\n        isDragging={props.isDragging}\n        isResizing={false}\n        isDateSelecting={false}\n        isSelected={props.isSelected}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => ( // we don't use styles!\n          <a\n            className={['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' ')}\n            ref={rootElRef}\n            {...getSegAnchorAttrs(props.seg, context)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderInnerContent(innerProps: EventContentArg) {\n  return (\n    <Fragment>\n      <div\n        className=\"fc-daygrid-event-dot\"\n        style={{ borderColor: innerProps.borderColor || innerProps.backgroundColor }}\n      />\n      {innerProps.timeText && (\n        <div className=\"fc-event-time\">{innerProps.timeText}</div>\n      )}\n      <div className=\"fc-event-title\">\n        {innerProps.event.title || <Fragment>&nbsp;</Fragment>}\n      </div>\n    </Fragment>\n  )\n}\n","import {\n  createElement,\n  MoreLinkRoot,\n  RefObject,\n  BaseComponent,\n  memoize,\n  DateMarker,\n  Dictionary,\n  DateProfile,\n  DateRange,\n  EventSegUiInteractionState,\n  getSegMeta,\n  Fragment,\n  createAriaClickAttrs,\n} from '@fullcalendar/common'\nimport { TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableCellMoreLinkProps {\n  allDayDate: DateMarker\n  singlePlacements: TableSegPlacement[]\n  moreCnt: number\n  alignmentElRef: RefObject<HTMLElement> // for popover\n  alignGridTop: boolean // for popover\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n}\n\nexport class TableCellMoreLink extends BaseComponent<TableCellMoreLinkProps> {\n  compileSegs = memoize(compileSegs)\n\n  render() {\n    let { props } = this\n    let { allSegs, invisibleSegs } = this.compileSegs(props.singlePlacements)\n\n    return (\n      <MoreLinkRoot\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        allDayDate={props.allDayDate}\n        moreCnt={props.moreCnt}\n        allSegs={allSegs}\n        hiddenSegs={invisibleSegs}\n        alignmentElRef={props.alignmentElRef}\n        alignGridTop={props.alignGridTop}\n        extraDateSpan={props.extraDateSpan}\n        popoverContent={() => {\n          let isForcedInvisible =\n            (props.eventDrag ? props.eventDrag.affectedInstances : null) ||\n            (props.eventResize ? props.eventResize.affectedInstances : null) ||\n            {}\n          return (\n            <Fragment>\n              {allSegs.map((seg) => {\n                let instanceId = seg.eventRange.instance.instanceId\n                return (\n                  <div\n                    className=\"fc-daygrid-event-harness\"\n                    key={instanceId}\n                    style={{\n                      visibility: isForcedInvisible[instanceId] ? 'hidden' : ('' as any),\n                    }}\n                  >\n                    {hasListItemDisplay(seg) ? (\n                      <TableListItemEvent\n                        seg={seg}\n                        isDragging={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    ) : (\n                      <TableBlockEvent\n                        seg={seg}\n                        isDragging={false}\n                        isResizing={false}\n                        isDateSelecting={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    )}\n                  </div>\n                )\n              })}\n            </Fragment>\n          )\n        }}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={rootElRef}\n            className={['fc-daygrid-more-link'].concat(classNames).join(' ')}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n            {...createAriaClickAttrs(handleClick)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction compileSegs(singlePlacements: TableSegPlacement[]): {\n  allSegs: TableSeg[]\n  invisibleSegs: TableSeg[]\n} {\n  let allSegs: TableSeg[] = []\n  let invisibleSegs: TableSeg[] = []\n\n  for (let placement of singlePlacements) {\n    allSegs.push(placement.seg)\n\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg)\n    }\n  }\n\n  return { allSegs, invisibleSegs }\n}\n","import {\n  Ref,\n  ComponentChildren,\n  createElement,\n  DateMarker,\n  DateComponent,\n  DateRange,\n  buildNavLinkAttrs,\n  WeekNumberRoot,\n  DayCellRoot,\n  DateProfile,\n  setRef,\n  createFormatter,\n  Dictionary,\n  createRef,\n  EventSegUiInteractionState,\n  getUniqueDomId,\n} from '@fullcalendar/common'\nimport { TableCellTop } from './TableCellTop'\nimport { TableCellMoreLink } from './TableCellMoreLink'\nimport { TableSegPlacement } from './event-placement'\n\nexport interface TableCellProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  extraHookProps?: Dictionary\n  extraDataAttrs?: Dictionary\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  elRef?: Ref<HTMLTableCellElement>\n  innerElRef?: Ref<HTMLDivElement>\n  bgContent: ComponentChildren\n  fgContentElRef?: Ref<HTMLDivElement> // TODO: rename!!! classname confusion. is the \"event\" div\n  fgContent: ComponentChildren\n  moreCnt: number\n  moreMarginTop: number\n  showDayNumber: boolean\n  showWeekNumber: boolean\n  forceDayTop: boolean\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  singlePlacements: TableSegPlacement[]\n}\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'narrow' })\n\nexport class TableCell extends DateComponent<TableCellProps> {\n  private rootElRef = createRef<HTMLElement>()\n  state = {\n    dayNumberId: getUniqueDomId(),\n  }\n\n  render() {\n    let { context, props, state, rootElRef } = this\n    let { date, dateProfile } = props\n    let navLinkAttrs = buildNavLinkAttrs(context, date, 'week')\n\n    return (\n      <DayCellRoot\n        date={date}\n        dateProfile={dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        elRef={this.handleRootEl}\n      >\n        {(dayElRef, dayClassNames, rootDataAttrs, isDisabled) => (\n          <td\n            ref={dayElRef}\n            role=\"gridcell\"\n            className={['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')}\n            {...rootDataAttrs}\n            {...props.extraDataAttrs}\n            {...(props.showDayNumber ? { 'aria-labelledby': state.dayNumberId } : {})}\n          >\n            <div className=\"fc-daygrid-day-frame fc-scrollgrid-sync-inner\" ref={props.innerElRef /* different from hook system! RENAME */}>\n              {props.showWeekNumber && (\n                <WeekNumberRoot date={date} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n                  {(weekElRef, weekClassNames, innerElRef, innerContent) => (\n                    <a\n                      ref={weekElRef}\n                      className={['fc-daygrid-week-number'].concat(weekClassNames).join(' ')}\n                      {...navLinkAttrs}\n                    >\n                      {innerContent}\n                    </a>\n                  )}\n                </WeekNumberRoot>\n              )}\n              {!isDisabled && (\n                <TableCellTop\n                  date={date}\n                  dateProfile={dateProfile}\n                  showDayNumber={props.showDayNumber}\n                  dayNumberId={state.dayNumberId}\n                  forceDayTop={props.forceDayTop}\n                  todayRange={props.todayRange}\n                  extraHookProps={props.extraHookProps}\n                />\n              )}\n              <div\n                className=\"fc-daygrid-day-events\"\n                ref={props.fgContentElRef}\n              >\n                {props.fgContent}\n                <div className=\"fc-daygrid-day-bottom\" style={{ marginTop: props.moreMarginTop }}>\n                  <TableCellMoreLink\n                    allDayDate={date}\n                    singlePlacements={props.singlePlacements}\n                    moreCnt={props.moreCnt}\n                    alignmentElRef={rootElRef}\n                    alignGridTop={!props.showDayNumber}\n                    extraDateSpan={props.extraDateSpan}\n                    dateProfile={props.dateProfile}\n                    eventSelection={props.eventSelection}\n                    eventDrag={props.eventDrag}\n                    eventResize={props.eventResize}\n                    todayRange={props.todayRange}\n                  />\n                </div>\n              </div>\n              <div className=\"fc-daygrid-day-bg\">\n                {props.bgContent}\n              </div>\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement) => {\n    setRef(this.rootElRef, el)\n    setRef(this.props.elRef, el)\n  }\n}\n","import {\n  SegHierarchy,\n  SegRect,\n  SegEntry,\n  SegInsertion,\n  buildEntryKey,\n  EventRenderRange,\n  intersectRanges,\n  addDays,\n  DayTableCell,\n  intersectSpans,\n} from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableSegPlacement {\n  seg: TableSeg\n  isVisible: boolean\n  isAbsolute: boolean\n  absoluteTop: number // populated regardless of isAbsolute\n  marginTop: number\n}\n\nexport function computeFgSegPlacement(\n  segs: TableSeg[], // assumed already sorted\n  dayMaxEvents: boolean | number,\n  dayMaxEventRows: boolean | number,\n  strictOrder: boolean,\n  eventInstanceHeights: { [instanceId: string]: number },\n  maxContentHeight: number | null,\n  cells: DayTableCell[],\n) {\n  let hierarchy = new DayGridSegHierarchy()\n  hierarchy.allowReslicing = true\n  hierarchy.strictOrder = strictOrder\n\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight\n    hierarchy.hiddenConsumes = true\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows\n    hierarchy.hiddenConsumes = true\n  }\n\n  // create segInputs only for segs with known heights\n  let segInputs: SegEntry[] = []\n  let unknownHeightSegs: TableSeg[] = []\n  for (let i = 0; i < segs.length; i += 1) {\n    let seg = segs[i]\n    let { instanceId } = seg.eventRange.instance\n    let eventHeight = eventInstanceHeights[instanceId]\n\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1,\n        },\n      })\n    } else {\n      unknownHeightSegs.push(seg)\n    }\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let segRects = hierarchy.toRects()\n  let { singleColPlacements, multiColPlacements, leftoverMargins } = placeRects(segRects, segs, cells)\n\n  let moreCnts: number[] = []\n  let moreMarginTops: number[] = []\n\n  // add segs with unknown heights\n  for (let seg of unknownHeightSegs) {\n    multiColPlacements[seg.firstCol].push({\n      seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // add the hidden entries\n  for (let col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0)\n  }\n  for (let hiddenEntry of hiddenEntries) {\n    let seg = segs[hiddenEntry.index]\n    let hiddenSpan = hiddenEntry.span\n\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // deal with leftover margins\n  for (let col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col])\n  }\n\n  return { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops }\n}\n\n// rects ordered by top coord, then left\nfunction placeRects(allRects: SegRect[], segs: TableSeg[], cells: DayTableCell[]) {\n  let rectsByEachCol = groupRectsByEachCol(allRects, cells.length)\n  let singleColPlacements: TableSegPlacement[][] = []\n  let multiColPlacements: TableSegPlacement[][] = []\n  let leftoverMargins: number[] = []\n\n  for (let col = 0; col < cells.length; col += 1) {\n    let rects = rectsByEachCol[col]\n\n    // compute all static segs in singlePlacements\n    let singlePlacements: TableSegPlacement[] = []\n    let currentHeight = 0\n    let currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight,\n      })\n      currentHeight = rect.levelCoord + rect.thickness\n    }\n\n    // compute mixed static/absolute segs in multiPlacements\n    let multiPlacements: TableSegPlacement[] = []\n    currentHeight = 0\n    currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      let isAbsolute = rect.span.end - rect.span.start > 1 // multi-column?\n      let isFirstCol = rect.span.start === col\n\n      currentMarginTop += rect.levelCoord - currentHeight // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness // height will now be bottom of current seg\n\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0,\n          })\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop, // claim the margin\n        })\n        currentMarginTop = 0\n      }\n    }\n\n    singleColPlacements.push(singlePlacements)\n    multiColPlacements.push(multiPlacements)\n    leftoverMargins.push(currentMarginTop)\n  }\n\n  return { singleColPlacements, multiColPlacements, leftoverMargins }\n}\n\nfunction groupRectsByEachCol(rects: SegRect[], colCnt: number): SegRect[][] {\n  let rectsByEachCol: SegRect[][] = []\n\n  for (let col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([])\n  }\n\n  for (let rect of rects) {\n    for (let col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect)\n    }\n  }\n\n  return rectsByEachCol\n}\n\nfunction resliceSeg(seg: TableSeg, spanStart: number, spanEnd: number, cells: DayTableCell[]): TableSeg {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg\n  }\n\n  let eventRange = seg.eventRange\n  let origRange = eventRange.range\n  let slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1),\n  })\n\n  return {\n    ...seg,\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: { ...eventRange.ui, durationEditable: false }, // hack to disable resizing\n      instance: eventRange.instance,\n      range: slicedRange,\n    } as EventRenderRange,\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf(),\n  }\n}\n\nclass DayGridSegHierarchy extends SegHierarchy {\n  // config\n  hiddenConsumes: boolean = false\n\n  // allows us to keep hidden entries in the hierarchy so they take up space\n  forceHidden: { [entryId: string]: true } = {}\n\n  addSegs(segInputs: SegEntry[]): SegEntry[] {\n    const hiddenSegs = super.addSegs(segInputs)\n    const { entriesByLevel } = this\n    const excludeHidden = (entry: SegEntry) => !this.forceHidden[buildEntryKey(entry)]\n\n    // remove the forced-hidden segs\n    for (let level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden)\n    }\n\n    return hiddenSegs\n  }\n\n  handleInvalidInsertion(insertion: SegInsertion, entry: SegEntry, hiddenEntries: SegEntry[]) {\n    const { entriesByLevel, forceHidden } = this\n    const { touchingEntry, touchingLevel, touchingLateral } = insertion\n\n    if (this.hiddenConsumes && touchingEntry) {\n      const touchingEntryId = buildEntryKey(touchingEntry)\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          const placeholderEntry: SegEntry = { // placeholder of the \"more\" link\n            ...touchingEntry,\n            span: intersectSpans(touchingEntry.span, entry.span),\n          }\n          const placeholderEntryId = buildEntryKey(placeholderEntry)\n          forceHidden[placeholderEntryId] = true\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries) // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true\n          hiddenEntries.push(touchingEntry)\n        }\n      }\n    }\n\n    return super.handleInvalidInsertion(insertion, entry, hiddenEntries)\n  }\n}\n","import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  createElement,\n  PositionCache,\n  RefMap,\n  CssDimValue,\n  DateRange,\n  getSegMeta,\n  DateProfile,\n  Fragment,\n  BgEvent,\n  renderFill,\n  isPropsEqual,\n  createRef,\n  buildEventRangeKey,\n  sortEventSegs,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByFirstCol } from './TableSeg'\nimport { TableCell } from './TableCell'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { computeFgSegPlacement, TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\n\n// TODO: attach to window resize?\n\nexport interface TableRowProps {\n  cells: DayTableCell[]\n  renderIntro?: () => VNode\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  clientWidth: number | null\n  clientHeight: number | null // simply for causing an updateSize, for when liquid height\n  dateProfile: DateProfile\n  todayRange: DateRange\n  showDayNumbers: boolean\n  showWeekNumbers: boolean\n  forPrint: boolean\n}\n\ninterface TableRowState {\n  framePositions: PositionCache\n  maxContentHeight: number | null\n  eventInstanceHeights: { [instanceId: string]: number } // integers\n}\n\nexport class TableRow extends DateComponent<TableRowProps, TableRowState> {\n  private cellElRefs = new RefMap<HTMLTableCellElement>() // the <td>\n  private frameElRefs = new RefMap<HTMLElement>() // the fc-daygrid-day-frame\n  private fgElRefs = new RefMap<HTMLDivElement>() // the fc-daygrid-day-events\n  private segHarnessRefs = new RefMap<HTMLDivElement>() // indexed by \"instanceId:firstCol\"\n  private rootElRef = createRef<HTMLTableRowElement>()\n\n  state: TableRowState = {\n    framePositions: null,\n    maxContentHeight: null,\n    eventInstanceHeights: {},\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { options } = context\n    let colCnt = props.cells.length\n\n    let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt)\n    let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt)\n    let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt)\n    let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt)\n\n    let { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops } = computeFgSegPlacement(\n      sortEventSegs(props.fgEventSegs, options.eventOrder) as TableSeg[],\n      props.dayMaxEvents,\n      props.dayMaxEventRows,\n      options.eventOrderStrict,\n      state.eventInstanceHeights,\n      state.maxContentHeight,\n      props.cells,\n    )\n\n    let isForcedInvisible = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    return (\n      <tr ref={this.rootElRef} role=\"row\">\n        {props.renderIntro && props.renderIntro()}\n        {props.cells.map((cell, col) => {\n          let normalFgNodes = this.renderFgSegs(\n            col,\n            props.forPrint ? singleColPlacements[col] : multiColPlacements[col],\n            props.todayRange,\n            isForcedInvisible,\n          )\n\n          let mirrorFgNodes = this.renderFgSegs(\n            col,\n            buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements),\n            props.todayRange,\n            {},\n            Boolean(props.eventDrag),\n            Boolean(props.eventResize),\n            false, // date-selecting (because mirror is never drawn for date selection)\n          )\n\n          return (\n            <TableCell\n              key={cell.key}\n              elRef={this.cellElRefs.createRef(cell.key)}\n              innerElRef={this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */}\n              dateProfile={props.dateProfile}\n              date={cell.date}\n              showDayNumber={props.showDayNumbers}\n              showWeekNumber={props.showWeekNumbers && col === 0}\n              forceDayTop={props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */}\n              todayRange={props.todayRange}\n              eventSelection={props.eventSelection}\n              eventDrag={props.eventDrag}\n              eventResize={props.eventResize}\n              extraHookProps={cell.extraHookProps}\n              extraDataAttrs={cell.extraDataAttrs}\n              extraClassNames={cell.extraClassNames}\n              extraDateSpan={cell.extraDateSpan}\n              moreCnt={moreCnts[col]}\n              moreMarginTop={moreMarginTops[col]}\n              singlePlacements={singleColPlacements[col]}\n              fgContentElRef={this.fgElRefs.createRef(cell.key)}\n              fgContent={( // Fragment scopes the keys\n                <Fragment>\n                  <Fragment>{normalFgNodes}</Fragment>\n                  <Fragment>{mirrorFgNodes}</Fragment>\n                </Fragment>\n              )}\n              bgContent={( // Fragment scopes the keys\n                <Fragment>\n                  {this.renderFillSegs(highlightSegsByCol[col], 'highlight')}\n                  {this.renderFillSegs(businessHoursByCol[col], 'non-business')}\n                  {this.renderFillSegs(bgEventSegsByCol[col], 'bg-event')}\n                </Fragment>\n              )}\n            />\n          )\n        })}\n      </tr>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing(true)\n  }\n\n  componentDidUpdate(prevProps: TableRowProps, prevState: TableRowState) {\n    let currentProps = this.props\n\n    this.updateSizing(\n      !isPropsEqual(prevProps, currentProps),\n    )\n  }\n\n  getHighlightSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventDrag && props.eventDrag.segs.length) { // messy check\n      return props.eventDrag.segs as TableSeg[]\n    }\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return props.dateSelectionSegs\n  }\n\n  getMirrorSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return []\n  }\n\n  renderFgSegs(\n    col: number,\n    segPlacements: TableSegPlacement[],\n    todayRange: DateRange,\n    isForcedInvisible: { [instanceId: string]: any },\n    isDragging?: boolean,\n    isResizing?: boolean,\n    isDateSelecting?: boolean,\n  ): VNode[] {\n    let { context } = this\n    let { eventSelection } = this.props\n    let { framePositions } = this.state\n    let defaultDisplayEventEnd = this.props.cells.length === 1 // colCnt === 1\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let placement of segPlacements) {\n        let { seg } = placement\n        let { instanceId } = seg.eventRange.instance\n        let key = instanceId + ':' + col\n        let isVisible = placement.isVisible && !isForcedInvisible[instanceId]\n        let isAbsolute = placement.isAbsolute\n        let left: CssDimValue = ''\n        let right: CssDimValue = ''\n\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n          } else {\n            left = 0\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n          }\n        }\n\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(\n          <div\n            className={'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : '')}\n            key={key}\n            ref={isMirror ? null : this.segHarnessRefs.createRef(key)}\n            style={{\n              visibility: isVisible ? ('' as any) : 'hidden',\n              marginTop: isAbsolute ? '' : placement.marginTop,\n              top: isAbsolute ? placement.absoluteTop : '',\n              left,\n              right,\n            }}\n          >\n            {hasListItemDisplay(seg) ? (\n              <TableListItemEvent\n                seg={seg}\n                isDragging={isDragging}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            ) : (\n              <TableBlockEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            )}\n          </div>,\n        )\n      }\n    }\n\n    return nodes\n  }\n\n  renderFillSegs(segs: TableSeg[], fillType: string): VNode {\n    let { isRtl } = this.context\n    let { todayRange } = this.props\n    let { framePositions } = this.state\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let seg of segs) {\n        let leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol],\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol],\n        }\n\n        nodes.push(\n          <div\n            key={buildEventRangeKey(seg.eventRange)}\n            className=\"fc-daygrid-bg-harness\"\n            style={leftRightCss}\n          >\n            {fillType === 'bg-event' ?\n              <BgEvent seg={seg} {...getSegMeta(seg, todayRange)} /> :\n              renderFill(fillType)}\n          </div>,\n        )\n      }\n    }\n\n    return createElement(Fragment, {}, ...nodes)\n  }\n\n  updateSizing(isExternalSizingChange) {\n    let { props, frameElRefs } = this\n\n    if (\n      !props.forPrint &&\n      props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        let frameEls = props.cells.map((cell) => frameElRefs.currentMap[cell.key])\n\n        if (frameEls.length) {\n          let originEl = this.rootElRef.current\n\n          this.setState({ // will trigger isCellPositionsChanged...\n            framePositions: new PositionCache(\n              originEl,\n              frameEls,\n              true, // isHorizontal\n              false,\n            ),\n          })\n        }\n      }\n\n      const oldInstanceHeights = this.state.eventInstanceHeights\n      const newInstanceHeights = this.queryEventInstanceHeights()\n      const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true\n\n      this.setState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: { ...oldInstanceHeights, ...newInstanceHeights },\n\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null,\n      })\n    }\n  }\n\n  queryEventInstanceHeights() {\n    let segElMap = this.segHarnessRefs.currentMap\n    let eventInstanceHeights: { [key: string]: number } = {}\n\n    // get the max height amongst instance segs\n    for (let key in segElMap) {\n      let height = Math.round(segElMap[key].getBoundingClientRect().height)\n      let instanceId = key.split(':')[0] // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height)\n    }\n\n    return eventInstanceHeights\n  }\n\n  computeMaxContentHeight() {\n    let firstKey = this.props.cells[0].key\n    let cellEl = this.cellElRefs.currentMap[firstKey]\n    let fcContainerEl = this.fgElRefs.currentMap[firstKey]\n\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top\n  }\n\n  public getCellEls() {\n    let elMap = this.cellElRefs.currentMap\n\n    return this.props.cells.map((cell) => elMap[cell.key])\n  }\n}\n\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual,\n})\n\nfunction buildMirrorPlacements(mirrorSegs: TableSeg[], colPlacements: TableSegPlacement[][]): TableSegPlacement[] {\n  if (!mirrorSegs.length) {\n    return []\n  }\n  let topsByInstanceId = buildAbsoluteTopHash(colPlacements) // TODO: cache this at first render?\n  return mirrorSegs.map((seg: TableSeg) => ({\n    seg,\n    isVisible: true,\n    isAbsolute: true,\n    absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n    marginTop: 0,\n  }))\n}\n\nfunction buildAbsoluteTopHash(colPlacements: TableSegPlacement[][]): { [instanceId: string]: number } {\n  let topsByInstanceId: { [instanceId: string]: number } = {}\n\n  for (let placements of colPlacements) {\n    for (let placement of placements) {\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop\n    }\n  }\n\n  return topsByInstanceId\n}\n","import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  RefObject,\n  CssDimValue,\n  createElement,\n  PositionCache,\n  memoize,\n  addDays,\n  RefMap,\n  DateRange,\n  NowTimer,\n  DateMarker,\n  DateProfile,\n  Fragment,\n  Hit,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByRow, splitInteractionByRow } from './TableSeg'\nimport { TableRow } from './TableRow'\n\nexport interface TableProps {\n  dateProfile: DateProfile\n  cells: DayTableCell[][] // cells-BY-ROW\n  renderRowIntro?: () => VNode\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  expandRows: boolean\n  showWeekNumbers: boolean\n  clientWidth: number | null\n  clientHeight: number | null\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  headerAlignElRef?: RefObject<HTMLElement>\n  forPrint: boolean\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\nexport class Table extends DateComponent<TableProps> {\n  private splitBusinessHourSegs = memoize(splitSegsByRow)\n  private splitBgEventSegs = memoize(splitSegsByRow)\n  private splitFgEventSegs = memoize(splitSegsByRow)\n  private splitDateSelectionSegs = memoize(splitSegsByRow)\n  private splitEventDrag = memoize(splitInteractionByRow)\n  private splitEventResize = memoize(splitInteractionByRow)\n  private rootEl: HTMLElement\n  private rowRefs = new RefMap<TableRow>()\n  private rowPositions: PositionCache\n  private colPositions: PositionCache\n\n  render() {\n    let { props } = this\n    let { dateProfile, dayMaxEventRows, dayMaxEvents, expandRows } = props\n    let rowCnt = props.cells.length\n\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt)\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt)\n\n    let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true\n\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false\n      dayMaxEventRows = null\n      dayMaxEvents = null\n    }\n\n    let classNames = [\n      'fc-daygrid-body',\n      limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', // will all row heights be equal?\n      expandRows ? '' : 'fc-daygrid-body-natural', // will height of one row depend on the others?\n    ]\n\n    return (\n      <div\n        className={classNames.join(' ')}\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <NowTimer unit=\"day\">\n          {(nowDate: DateMarker, todayRange: DateRange) => (\n            <Fragment>\n              <table\n                role=\"presentation\"\n                className=\"fc-scrollgrid-sync-table\"\n                style={{\n                  width: props.clientWidth,\n                  minWidth: props.tableMinWidth,\n                  height: expandRows ? props.clientHeight : '',\n                }}\n              >\n                {props.colGroupNode}\n                <tbody role=\"presentation\">\n                  {props.cells.map((cells, row) => (\n                    <TableRow\n                      ref={this.rowRefs.createRef(row)}\n                      key={\n                        cells.length\n                          ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */\n                          : row // in case there are no cells (like when resource view is loading)\n                      }\n                      showDayNumbers={rowCnt > 1}\n                      showWeekNumbers={props.showWeekNumbers}\n                      todayRange={todayRange}\n                      dateProfile={dateProfile}\n                      cells={cells}\n                      renderIntro={props.renderRowIntro}\n                      businessHourSegs={businessHourSegsByRow[row]}\n                      eventSelection={props.eventSelection}\n                      bgEventSegs={bgEventSegsByRow[row].filter(isSegAllDay) /* hack */}\n                      fgEventSegs={fgEventSegsByRow[row]}\n                      dateSelectionSegs={dateSelectionSegsByRow[row]}\n                      eventDrag={eventDragByRow[row]}\n                      eventResize={eventResizeByRow[row]}\n                      dayMaxEvents={dayMaxEvents}\n                      dayMaxEventRows={dayMaxEventRows}\n                      clientWidth={props.clientWidth}\n                      clientHeight={props.clientHeight}\n                      forPrint={props.forPrint}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </Fragment>\n          )}\n        </NowTimer>\n      </div>\n    )\n  }\n\n  handleRootEl = (rootEl: HTMLElement | null) => {\n    this.rootEl = rootEl\n\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, {\n        el: rootEl,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n\n  prepareHits() {\n    this.rowPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.collect().map((rowObj) => rowObj.getCellEls()[0]), // first cell el in each row. TODO: not optimal\n      false,\n      true, // vertical\n    )\n\n    this.colPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.currentMap[0].getCellEls(), // cell els in first row\n      true, // horizontal\n      false,\n    )\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { colPositions, rowPositions } = this\n    let col = colPositions.leftToIndex(positionLeft)\n    let row = rowPositions.topToIndex(positionTop)\n\n    if (row != null && col != null) {\n      let cell = this.props.cells[row][col]\n\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: {\n          range: this.getCellRange(row, col),\n          allDay: true,\n          ...cell.extraDateSpan,\n        },\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row],\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n\n  private getCellEl(row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col] // TODO: not optimal\n  }\n\n  private getCellRange(row, col) {\n    let start = this.props.cells[row][col].date\n    let end = addDays(start, 1)\n    return { start, end }\n  }\n}\n\nfunction isSegAllDay(seg: TableSeg) {\n  return seg.eventRange.def.allDay\n}\n","import { DayTableModel, DateRange, Slicer } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport class DayTableSlicer extends Slicer<TableSeg, [DayTableModel]> {\n  forceDayIfListItem = true\n\n  sliceRange(dateRange: DateRange, dayTableModel: DayTableModel): TableSeg[] {\n    return dayTableModel.sliceRange(dateRange)\n  }\n}\n","import {\n  createElement, createRef, VNode,\n  EventStore,\n  EventUiHash,\n  DateSpan,\n  EventInteractionState,\n  DayTableModel,\n  Duration,\n  DateComponent,\n  ViewContext,\n  RefObject,\n  CssDimValue,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { Table } from './Table'\nimport { DayTableSlicer } from './DayTableSlicer'\n\nexport interface DayTableProps {\n  dateProfile: DateProfile,\n  dayTableModel: DayTableModel\n  nextDayThreshold: Duration\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  renderRowIntro?: () => VNode\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  expandRows: boolean\n  showWeekNumbers: boolean\n  headerAlignElRef?: RefObject<HTMLElement> // for more popover alignment\n  clientWidth: number | null\n  clientHeight: number | null\n  forPrint: boolean\n}\n\nexport class DayTable extends DateComponent<DayTableProps, ViewContext> {\n  private slicer = new DayTableSlicer()\n  private tableRef = createRef<Table>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <Table\n        ref={this.tableRef}\n        {...this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel)}\n        dateProfile={props.dateProfile}\n        cells={props.dayTableModel.cells}\n        colGroupNode={props.colGroupNode}\n        tableMinWidth={props.tableMinWidth}\n        renderRowIntro={props.renderRowIntro}\n        dayMaxEvents={props.dayMaxEvents}\n        dayMaxEventRows={props.dayMaxEventRows}\n        showWeekNumbers={props.showWeekNumbers}\n        expandRows={props.expandRows}\n        headerAlignElRef={props.headerAlignElRef}\n        clientWidth={props.clientWidth}\n        clientHeight={props.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n  }\n}\n","import {\n  createElement, createRef,\n  DayHeader,\n  DateProfileGenerator,\n  DateProfile,\n  memoize,\n  DaySeriesModel,\n  DayTableModel,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { TableView } from './TableView'\nimport { DayTable } from './DayTable'\n\nexport class DayTableView extends TableView {\n  private buildDayTableModel = memoize(buildDayTableModel)\n  private headerRef = createRef<DayHeader>()\n  private tableRef = createRef<DayTable>()\n\n  render() {\n    let { options, dateProfileGenerator } = this.context\n    let { props } = this\n    let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator)\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        ref={this.headerRef}\n        dateProfile={props.dateProfile}\n        dates={dayTableModel.headerDates}\n        datesRepDistinctDays={dayTableModel.rowCnt === 1}\n      />\n    )\n\n    let bodyContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        ref={this.tableRef}\n        dateProfile={props.dateProfile}\n        dayTableModel={dayTableModel}\n        businessHours={props.businessHours}\n        dateSelection={props.dateSelection}\n        eventStore={props.eventStore}\n        eventUiBases={props.eventUiBases}\n        eventSelection={props.eventSelection}\n        eventDrag={props.eventDrag}\n        eventResize={props.eventResize}\n        nextDayThreshold={options.nextDayThreshold}\n        colGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        dayMaxEvents={options.dayMaxEvents}\n        dayMaxEventRows={options.dayMaxEventRows}\n        showWeekNumbers={options.weekNumbers}\n        expandRows={!props.isHeightAuto}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n\n    return options.dayMinWidth\n      ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth)\n      : this.renderSimpleLayout(headerContent, bodyContent)\n  }\n}\n\nexport function buildDayTableModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(\n    daySeries,\n    /year|month|week/.test(dateProfile.currentRangeUnit),\n  )\n}\n","import {\n  DateProfileGenerator,\n  addWeeks, diffWeeks,\n  DateRange,\n} from '@fullcalendar/common'\n\nexport class TableDateProfileGenerator extends DateProfileGenerator {\n  // Computes the date range that will be rendered.\n  buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay): DateRange {\n    let { dateEnv } = this.props\n    let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay)\n    let start = renderRange.start\n    let end = renderRange.end\n    let endOfWeek\n\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start)\n\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end)\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1)\n      }\n    }\n\n    // ensure 6 weeks\n    if (\n      this.props.monthMode &&\n      this.props.fixedWeekCount\n    ) {\n      let rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n        diffWeeks(start, end),\n      )\n      end = addWeeks(end, 6 - rowCnt)\n    }\n\n    return { start, end }\n  }\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { DayTableView } from './DayTableView'\nimport { TableDateProfileGenerator } from './TableDateProfileGenerator'\nimport './main.css'\n\nexport { DayTable } from './DayTable'\nexport { DayTableSlicer } from './DayTableSlicer'\nexport { Table } from './Table'\nexport { TableSeg } from './TableSeg'\nexport { TableView } from './TableView'\nexport { buildDayTableModel } from './DayTableView'\nexport { DayTableView as DayGridView } // export as old name!\n\nexport default createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator,\n    },\n\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: { days: 1 },\n    },\n\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: { weeks: 1 },\n    },\n\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: { months: 1 },\n      monthMode: true,\n      fixedWeekCount: true,\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}